name: NewsDNA-Talk-CI-CD

on:
  push:
    branches:
      - release/sit

env:
  APPLICATION: talk
  PRODUCT: talk
  ENV: sit
  NETWORKSECURITYENV: sit
  CORAL_TALK_VERSION: v4.12.0

jobs:
  prepare:
    name: Prepare - Checkout and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Set up Node.js and Yarn
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install 14.21.3
          nvm use 14.21.3
          npm install -g yarn

      - name: Install dependencies and build
        run: |
          yarn install
          yarn build || echo "Skipping build errors for prototype"

      - name: Create dummy script and zip artifacts
        run: |
          mkdir -p bamboo/soe/scripts
          echo '#!/bin/bash' > bamboo/soe/scripts/ops.sh
          echo 'set -ex' >> bamboo/soe/scripts/ops.sh
          echo 'echo Simulated get_latest_ami' >> bamboo/soe/scripts/ops.sh
          echo 'echo Simulated AMI build' >> bamboo/soe/scripts/ops.sh
          echo 'echo ami=ami-1234567890abcdef0 > ami.txt' >> bamboo/soe/scripts/ops.sh
          chmod +x bamboo/soe/scripts/ops.sh

          mkdir -p output
          echo "Sample build content" > output/result.txt
          tar -czf package.tar.gz output/

          zip -r build-artifacts.zip bamboo package.tar.gz
          unzip -l build-artifacts.zip

      - name: Upload zipped artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts.zip

  bake-ami:
    name: Bake AMI
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./app/scripts

      - name: Unzip artifacts
        run: |
          unzip app/scripts/build-artifacts.zip -d app/scripts/

      - name: Set up dummy environment variables
        env:
          RUN_NUMBER: ${{ github.run_number }}
        run: |
          echo "bamboo_CFNBaseFolder=sample-folder" >> $GITHUB_ENV
          echo "bamboo_ImageBaseVersion=1.0.0" >> $GITHUB_ENV
          echo "bamboo_buildNumber=$RUN_NUMBER" >> $GITHUB_ENV
          echo "bamboo_planRepository_name=talk" >> $GITHUB_ENV
          echo "bamboo_planKey=NEWSDNA-TALK" >> $GITHUB_ENV

      - name: Run mock ops.sh
        run: |
          chmod +x app/scripts/bamboo/soe/scripts/ops.sh
          ./app/scripts/bamboo/soe/scripts/ops.sh build SOE

      - name: Upload AMI result
        run: echo "ami-dummy-12345" > ami.txt

      - name: Upload AMI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ami
          path: ami.txt

  deploy-sit:
    name: Deploy to SIT
    runs-on: ubuntu-latest
    needs: bake-ami
    environment:
      name: SIT
      url: https://your-sit-url.example.com  # Optional placeholder
    steps:
      - name: Simulate deployment
        run: |
          echo "Deploying to SIT environment..."
          echo "AMI ID: $(cat ami.txt || echo dummy-ami)"

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [prepare, bake-ami, deploy-sit]
    if: failure()
    steps:
      - name: Send dummy Slack notification
        run: |
          echo "Sending dummy Slack alert"
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚ùå *CI/CD Pipeline Failed* (Prototype)"}' \
          ${{ secrets.SLACK_WEBHOOK_URL || 'https://hooks.slack.com/services/test/test/test' }}
